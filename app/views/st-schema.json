{
	"$": {
		"signature": {
			":length": 8,
			":before": "0x00000000",
			":end": "0x00000007",
			":type": "byte[this.:length]",
			":pattern": [
				"0x89", "0x50", "0x4e", "0x47",
				"0x0d", "0x0a", "0x1a", "0x0a"
			],
			":value": "read(this.:before, this.:end)",
			":description": "PNG file signafure",
			":require": true
		},
		"ihdr": {
			"length": {
				":pattern": "0x0000000D"
			},
			"data": {
				"type": "'IHDR'",
				"width": "int",
				"height": "int",
				"depth": "byte",
				"colorType": "byte",
				"compress": "byte",
				"filter": "byte",
				"interlace": "byte"
			},
			"crc": "$crc"
		},
		"plte": {
			"length": "int",
			"data": {
				"type": "'PLTE'",
				"bytes": "$pallet[this.length]"
			},
			"crc": "$crc",
			":require": false
		},
		"idat": {
			"length": "int",
			"type": "'IDAT'",
			"bytes": "byte[this.length]",
			"crc": "$crc"
		},
		"iend": {
			"length": "0x00000000",
			"type": "'IEND'",
			"crc": "0xAE426082"
		}
	},
	"$pallet": "byte[3]",
	"$crc": {
		":type": "int",
		":value": "crc(this.data.:before, this.data.:end)"
	}
}

// number of identifers
digit ::= "[0-9]"
natural_number ::= "0" | {digit}
sign ::= "[-+]"
signed_number ::= [sign], natural_number

// decimel of identifers
decimel_delimiter ::= "[.]"
signed_decimel ::= signed_number, decimel_delimiter, {digit}

// string of identifers
alphabet ::= "[a-zA-Z]"
character_symbol ::= "[$_.]"
character ::= alphabet | digit | character_symbol
idenrifer_head ::= "[$_]" | alphabet
identifer ::= idenrifer_head, [{character}]

// hex of identifers
hex_identifer ::= "0x"

// constant structures
string ::= "'", {"."}, "'"
byte ::= hex_identifer, {digit}{2}
short ::= hex_identifer, {digit}{4}
int ::= hex_identifer, {digit}{8}
float ::= signed_decimel
numeric ::= signed_number
constant ::= string | byte | short | int | float | numeric

// dynamic structures
array ::= identifer, "[" identifer "]"
reference ::= "$", array | identifer
dynamic ::= array | reference

// structure
structure ::= dynamic | constant

// expression
expression_symbol ::= "[+-*/%&|^]"
expression ::= ["("], expression | structure, expression_symbol, expression | structure, [")"]

// function
invoker ::= dynamic | identifer
function ::= invoker, "(", [{function | expression | structure, [",", function | expression | structure]}], ")"

// literals
literal_boolean = typeof value === "boolean"
literal_array = Array.isArray(value)
literal_object = typeof value === "object"
